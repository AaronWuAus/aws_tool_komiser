{"ast":null,"code":"import _classCallCheck from \"/Users/mlabouardy/go/src/github.com/mlabouardy/komiser/dashboard/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/mlabouardy/go/src/github.com/mlabouardy/komiser/dashboard/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _toConsumableArray from \"/Users/mlabouardy/go/src/github.com/mlabouardy/komiser/dashboard/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _toArray from \"/Users/mlabouardy/go/src/github.com/mlabouardy/komiser/dashboard/node_modules/@babel/runtime/helpers/esm/toArray.js\";\nimport { animate, keyframes, state, style, transition, trigger } from '@angular/animations';\nimport { Component, Input, ViewChild, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/* eslint-disable no-restricted-properties */\n\n/**\n * normalize\n * This lets us translate a value from one scale to another.\n *\n * @param {?} value - Our initial value to translate\n * @param {?} min - the current minimum value possible\n * @param {?} max - the current maximum value possible\n * @param {?=} scaleMin - the min value of the scale we're translating to\n * @param {?=} scaleMax - the max value of the scale we're translating to\n *\n * @return {?} the value on its new scale\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nvar _c0 = [\"pathEl\"];\n\nfunction TrendComponent__svg_svg_0__svg_defs_1__svg_stop_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"stop\");\n  }\n\n  if (rf & 2) {\n    var g_r4 = ctx.$implicit;\n    ɵngcc0.ɵɵattribute(\"key\", g_r4.idx)(\"offset\", g_r4.offset)(\"stop-color\", g_r4.stopColor);\n  }\n}\n\nfunction TrendComponent__svg_svg_0__svg_defs_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"defs\");\n    ɵngcc0.ɵɵelementStart(1, \"linearGradient\", 3);\n    ɵngcc0.ɵɵtemplate(2, TrendComponent__svg_svg_0__svg_defs_1__svg_stop_2_Template, 1, 3, \"stop\", 4);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r1 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵattribute(\"id\", ctx_r1.gradientId);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngForOf\", ctx_r1.gradientTrimmed);\n  }\n}\n\nvar _c1 = function _c1(a0, a1, a2) {\n  return {\n    autoDrawDuration: a0,\n    autoDrawEasing: a1,\n    lineLength: a2\n  };\n};\n\nvar _c2 = function _c2(a0, a1) {\n  return {\n    value: a0,\n    params: a1\n  };\n};\n\nfunction TrendComponent__svg_svg_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"svg\");\n    ɵngcc0.ɵɵtemplate(1, TrendComponent__svg_svg_0__svg_defs_1_Template, 3, 2, \"defs\", 0);\n    ɵngcc0.ɵɵelement(2, \"path\", 1, 2);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵattribute(\"width\", ctx_r0.svgWidth)(\"height\", ctx_r0.svgHeight)(\"stroke\", ctx_r0.stroke)(\"stroke-width\", ctx_r0.strokeWidth)(\"stroke-linecap\", ctx_r0.strokeLinecap)(\"viewBox\", ctx_r0.viewBox)(\"preserveAspectRatio\", ctx_r0.preserveAspectRatio);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r0.gradient && ctx_r0.gradient.length);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"@pathAnimaiton\", ɵngcc0.ɵɵpureFunction2(15, _c2, ctx_r0.animationState, ɵngcc0.ɵɵpureFunction3(11, _c1, ctx_r0.autoDrawDuration, ctx_r0.autoDrawEasing, ctx_r0.lineLength)));\n    ɵngcc0.ɵɵattribute(\"stroke\", ctx_r0.pathStroke)(\"d\", ctx_r0.d);\n  }\n}\n\nfunction normalize(value, min, max) {\n  var scaleMin = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n  var scaleMax = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\n\n  // If the `min` and `max` are the same value, it means our dataset is flat.\n  // For now, let's assume that flat data should be aligned to the bottom.\n  if (min === max) {\n    return scaleMin;\n  }\n\n  return scaleMin + (value - min) * (scaleMax - scaleMin) / (max - min);\n}\n/**\n * moveTo\n * the coordinate that lies at a midpoint between 2 lines, based on the radius\n *\n * @param {?} to - Our initial point\n * @param {?} from - Our final point\n * @param {?} radius - The distance away from the final point\n *\n * @return {?} an object holding the x/y coordinates of the midpoint.\n */\n\n\nfunction moveTo(to, from, radius) {\n  /** @type {?} */\n  var length = Math.sqrt((to.x - from.x) * (to.x - from.x) + (to.y - from.y) * (to.y - from.y));\n  /** @type {?} */\n\n  var unitVector = {\n    x: (to.x - from.x) / length,\n    y: (to.y - from.y) / length\n  };\n  return {\n    x: from.x + unitVector.x * radius,\n    y: from.y + unitVector.y * radius\n  };\n}\n/**\n * getDistanceBetween\n * Simple formula derived from pythagoras to calculate the distance between\n * 2 points on a plane.\n *\n * \\@param p1 - Our initial point\n * \\@param p1.x - The x value of our initial point\n * \\@param p1.y - The y value of our initial point\n * \\@param p2 - Our final point\n * \\@param p2.x - The x value of our final point\n * \\@param p2.y - The y value of our final point\n *\n * \\@return the distance between the points.\n * @type {?}\n */\n\n\nvar getDistanceBetween = function getDistanceBetween(p1, p2) {\n  return Math.sqrt(Math.pow(p2.x - p1.x, 2) + Math.pow(p2.y - p1.y, 2));\n};\n/**\n * checkForCollinearPoints\n * Figure out if the midpoint fits perfectly on a line between the two others.\n *\n * \\@param p1 - Our initial point\n * \\@param p1.x - The x value of our initial point\n * \\@param p1.y - The y value of our initial point\n * \\@param p2 - Our mid-point\n * \\@param p2.x - The x value of our mid-point\n * \\@param p2.y - The y value of our mid-point\n * \\@param p3 - Our final point\n * \\@param p3.x - The x value of our final point\n * \\@param p3.y - The y value of our final point\n * \\@return whether or not p2 sits on the line between p1 and p3.\n * @type {?}\n */\n\n\nvar checkForCollinearPoints = function checkForCollinearPoints(p1, p2, p3) {\n  return (p1.y - p2.y) * (p1.x - p3.x) === (p1.y - p3.y) * (p1.x - p2.x);\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nvar buildLinearPath = function buildLinearPath(data) {\n  return data.reduce(function (path, point, index) {\n    // The very first instruction needs to be a \"move\".\n    // The rest will be a \"line\".\n\n    /** @type {?} */\n    var isFirstInstruction = index === 0;\n    /** @type {?} */\n\n    var instruction = isFirstInstruction ? 'M' : 'L';\n    return \"\".concat(path).concat(instruction, \" \").concat(point.x, \",\").concat(point.y, \"\\n\");\n  }, '');\n};\n/**\n * @param {?} data\n * @param {?} radius\n * @return {?}\n */\n\n\nfunction buildSmoothPath(data, radius) {\n  var _data = _toArray(data),\n      firstPoint = _data[0],\n      otherPoints = _data.slice(1);\n\n  return otherPoints.reduce(function (path, point, index) {\n    /** @type {?} */\n    var next = otherPoints[index + 1];\n    /** @type {?} */\n\n    var prev = otherPoints[index - 1] || firstPoint;\n    /** @type {?} */\n\n    var isCollinear = next && checkForCollinearPoints(prev, point, next);\n\n    if (!next || isCollinear) {\n      // The very last line in the sequence can just be a regular line.\n      return \"\".concat(path, \"\\nL \").concat(point.x, \",\").concat(point.y);\n    }\n    /** @type {?} */\n\n\n    var distanceFromPrev = getDistanceBetween(prev, point);\n    /** @type {?} */\n\n    var distanceFromNext = getDistanceBetween(next, point);\n    /** @type {?} */\n\n    var threshold = Math.min(distanceFromPrev, distanceFromNext);\n    /** @type {?} */\n\n    var isTooCloseForRadius = threshold / 2 < radius;\n    /** @type {?} */\n\n    var radiusForPoint = isTooCloseForRadius ? threshold / 2 : radius;\n    /** @type {?} */\n\n    var before = moveTo(prev, point, radiusForPoint);\n    /** @type {?} */\n\n    var after = moveTo(next, point, radiusForPoint);\n    return [path, \"L \".concat(before.x, \",\").concat(before.y), \"S \".concat(point.x, \",\").concat(point.y, \" \").concat(after.x, \",\").concat(after.y)].join('\\n');\n  }, \"M \".concat(firstPoint.x, \",\").concat(firstPoint.y));\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nvar generateId = function generateId() {\n  return Math.round(Math.random() * Math.pow(10, 16));\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @param {?} data\n * @param {?} minX\n * @param {?} maxX\n * @param {?} minY\n * @param {?} maxY\n * @return {?}\n */\n\n\nfunction normalizeDataset(data, minX, maxX, minY, maxY) {\n  // For the X axis, we want to normalize it based on its index in the array.\n  // For the Y axis, we want to normalize it based on the element's value.\n  //\n  // X axis is easy: just evenly-space each item in the array.\n  // For the Y axis, we first need to find the min and max of our array,\n  // and then normalize those values between 0 and 1.\n\n  /** @type {?} */\n  var boundariesX = {\n    min: 0,\n    max: data.length - 1\n  };\n  /** @type {?} */\n\n  var boundariesY = {\n    min: Math.min.apply(Math, _toConsumableArray(data)),\n    max: Math.max.apply(Math, _toConsumableArray(data))\n  };\n  /** @type {?} */\n\n  var normalizedData = data.map(function (point, index) {\n    return {\n      x: normalize(index, boundariesX.min, boundariesX.max, minX, maxX),\n      y: normalize(point, boundariesY.min, boundariesY.max, minY, maxY)\n    };\n  }); // According to the SVG spec, paths with a height/width of `0` can't have\n  // linear gradients applied. This means that our lines are invisible when\n  // the dataset is flat (eg. [0, 0, 0, 0]).\n  //\n  // The hacky solution is to apply a very slight offset to the first point of\n  // the dataset. As ugly as it is, it's the best solution we can find (there\n  // are ways within the SVG spec of changing it, but not without causing\n  // breaking changes).\n\n  if (boundariesY.min === boundariesY.max) {\n    normalizedData[0].y += 0.0001;\n  }\n\n  return normalizedData;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n\nvar TrendComponent = /*#__PURE__*/(function () {\n  var TrendComponent = /*#__PURE__*/function () {\n    function TrendComponent() {\n      _classCallCheck(this, TrendComponent);\n\n      this.autoDraw = false;\n      this.autoDrawDuration = 2000;\n      this.autoDrawEasing = 'ease';\n      this.padding = 8;\n      this.radius = 10;\n      this.stroke = 'black';\n      this.strokeLinecap = '';\n      this.strokeWidth = 1;\n      this.gradient = [];\n      this.svgHeight = '25%';\n      this.svgWidth = '100%';\n      this.animationState = '';\n      this.id = generateId();\n      this.gradientId = \"ngx-trend-vertical-gradient-\".concat(this.id);\n    }\n    /**\n     * @return {?}\n     */\n\n\n    _createClass(TrendComponent, [{\n      key: \"ngOnChanges\",\n      value: function ngOnChanges() {\n        var _this = this;\n\n        // We need at least 2 points to draw a graph.\n        if (!this.data || this.data.length < 2) {\n          return;\n        } // `data` can either be an array of numbers:\n        // [1, 2, 3]\n        // or, an array of objects containing a value:\n        // [{ value: 1 }, { value: 2 }, { value: 3 }]\n        //\n        // For now, we're just going to convert the second form to the first.\n        // Later on, if/when we support tooltips, we may adjust.\n\n        /** @type {?} */\n\n\n        var plainValues = this.data.map(function (point) {\n          if (typeof point === 'number') {\n            return point;\n          }\n\n          return point.value;\n        }); // Our viewbox needs to be in absolute units, so we'll default to 300x75\n        // Our SVG can be a %, though; this is what makes it scalable.\n        // By defaulting to percentages, the SVG will grow to fill its parent\n        // container, preserving a 1/4 aspect ratio.\n\n        /** @type {?} */\n\n        var viewBoxWidth = this.width || 300;\n        /** @type {?} */\n\n        var viewBoxHeight = this.height || 75;\n        this.svgWidth = this.width || '100%';\n        this.svgHeight = this.height || '25%';\n        this.viewBox = \"0 0 \".concat(viewBoxWidth, \" \").concat(viewBoxHeight);\n        /** @type {?} */\n\n        var root = location.href.split(location.hash || '#')[0];\n        this.pathStroke = this.gradient && this.gradient.length ? \"url('\".concat(root, \"#\").concat(this.gradientId, \"')\") : undefined;\n        this.gradientTrimmed = this.gradient.slice().reverse().map(function (val, idx) {\n          return {\n            idx: idx,\n            stopColor: val,\n            offset: normalize(idx, 0, _this.gradient.length - 1 || 1)\n          };\n        });\n        /** @type {?} */\n\n        var normalizedValues = normalizeDataset(plainValues, this.padding, viewBoxWidth - this.padding, // NOTE: Because SVGs are indexed from the top left, but most data is\n        // indexed from the bottom left, we're inverting the Y min/max.\n        viewBoxHeight - this.padding, this.padding);\n\n        if (this.autoDraw && this.animationState !== 'active') {\n          this.animationState = 'inactive';\n          setTimeout(function () {\n            _this.lineLength = _this.pathEl.nativeElement.getTotalLength();\n            _this.animationState = 'active';\n          });\n        }\n\n        this.d = this.smooth ? buildSmoothPath(normalizedValues, this.radius) : buildLinearPath(normalizedValues);\n      }\n    }]);\n\n    return TrendComponent;\n  }();\n\n  TrendComponent.ɵfac = function TrendComponent_Factory(t) {\n    return new (t || TrendComponent)();\n  };\n\n  TrendComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: TrendComponent,\n    selectors: [[\"ngx-trend\"]],\n    viewQuery: function TrendComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 5);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.pathEl = _t.first);\n      }\n    },\n    inputs: {\n      autoDraw: \"autoDraw\",\n      autoDrawDuration: \"autoDrawDuration\",\n      autoDrawEasing: \"autoDrawEasing\",\n      padding: \"padding\",\n      radius: \"radius\",\n      stroke: \"stroke\",\n      strokeLinecap: \"strokeLinecap\",\n      strokeWidth: \"strokeWidth\",\n      gradient: \"gradient\",\n      svgHeight: \"svgHeight\",\n      svgWidth: \"svgWidth\",\n      data: \"data\",\n      smooth: \"smooth\",\n      width: \"width\",\n      height: \"height\",\n      preserveAspectRatio: \"preserveAspectRatio\"\n    },\n    features: [ɵngcc0.ɵɵNgOnChangesFeature],\n    decls: 1,\n    vars: 1,\n    consts: [[4, \"ngIf\"], [\"fill\", \"none\"], [\"pathEl\", \"\"], [\"x1\", \"0%\", \"y1\", \"0%\", \"x2\", \"0%\", \"y2\", \"100%\"], [4, \"ngFor\", \"ngForOf\"]],\n    template: function TrendComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵtemplate(0, TrendComponent__svg_svg_0_Template, 4, 18, \"svg\", 0);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.data && ctx.data.length >= 2);\n      }\n    },\n    directives: [ɵngcc1.NgIf, ɵngcc1.NgForOf],\n    encapsulation: 2,\n    data: {\n      animation: [trigger('pathAnimaiton', [state('inactive', style({\n        display: 'none'\n      })), transition('* => active', [style({\n        display: 'initial'\n      }), // We do the animation using the dash array/offset trick\n      // https://css-tricks.com/svg-line-animation-works/\n      animate('{{ autoDrawDuration }}ms {{ autoDrawEasing }}', keyframes([style({\n        'stroke-dasharray': '{{ lineLength }}px',\n        'stroke-dashoffset': '{{ lineLength }}px'\n      }), style({\n        'stroke-dasharray': '{{ lineLength }}px',\n        'stroke-dashoffset': 0\n      })])), // One unfortunate side-effect of the auto-draw is that the line is\n      // actually 1 big dash, the same length as the line itself. If the\n      // line length changes (eg. radius change, new data), that dash won't\n      // be the same length anymore. We can fix that by removing those\n      // properties once the auto-draw is completed.\n      style({\n        'stroke-dashoffset': '',\n        'stroke-dasharray': ''\n      })])])]\n    }\n  });\n  /** @nocollapse */\n\n  return TrendComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n\nvar TrendModule = /*#__PURE__*/(function () {\n  var TrendModule = /*#__PURE__*/_createClass(function TrendModule() {\n    _classCallCheck(this, TrendModule);\n  });\n\n  TrendModule.ɵfac = function TrendModule_Factory(t) {\n    return new (t || TrendModule)();\n  };\n\n  TrendModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: TrendModule\n  });\n  TrendModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule]]\n  });\n  return TrendModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(TrendModule, {\n    declarations: function declarations() {\n      return [TrendComponent];\n    },\n    imports: function imports() {\n      return [CommonModule];\n    },\n    exports: function exports() {\n      return [TrendComponent];\n    }\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n\nexport { TrendComponent, TrendModule }; //# sourceMappingURL=data:application/json;charset=utf-8;base64,","map":null,"metadata":{},"sourceType":"module"}